#!/usr/bin/env perl
use warnings;
use strict;
no warnings 'qw';

use Carp;
use Getopt::Long qw(:config no_ignore_case);
use Pod::Usage;
use Log::Log4perl qw(:no_extra_logdie_message);
use Log::Log4perl::Level;

use File::Basename;
use File::Which;
use File::Temp 'tempdir';
use FindBin '$RealBin';

use Graph;

use Data::Dumper;
$Data::Dumper::Sortkeys = 1;
use Fasta::Parser;
use Fastq::Parser;
use Sam::Parser;
use Sam::Alignment ':flags';

##---------------------------------------------------------------------------##
# Globals

our $VERSION = "0.2.1";

our $ID = 'imp';

# get a logger
my $L = Log::Log4perl::get_logger();

Log::Log4perl->init( \(q(
	log4perl.rootLogger                     = INFO, Screen
	log4perl.appender.Screen                = Log::Log4perl::Appender::Screen
	log4perl.appender.Screen.stderr         = 1
	log4perl.appender.Screen.layout         = PatternLayout
	log4perl.appender.Screen.layout.ConversionPattern = [%d{yy-MM-dd HH:mm:ss}] [).$ID.q(] %m%n
)));

##----------------------------------------------------------------------------##
# IDEA

# binaries
#  SeqFilter
#  bwa
#  samtools

# read seqs
# fastq to fasta
# tmp files in /dev/shm/imp-XXXXX or fallback to /tmp

##----------------------------------------------------------------------------##
# Options

my %opt = (
           samtools_path => '',
           bwa_path => $RealBin.'/../util/bwa/',
           threads => 1,
           term_ignore_length => 20,
           bwa_opt => [qw(-a -D0 -y10 -r 1 -e -T 70 -W40 -L0,0)],
#           bwa_opt => [qw(-a -D0 -e -T 0 -W40 -L0,0)],
           dir => '.',
           out => $ID,
           tmp => (-d '/dev/shm' ? '/dev/shm' : '/tmp'),
          );

GetOptions(                     # use %opt (Cfg) as defaults
           \%opt, qw(
                        dir=s
                        out=s
                        threads=i
                        frg|fragments=s
                        ref|reference=s
                        samtools-path=s
                        version|V!
                        help|h!
                        quiet!
                        debug|D!
                   )
          ) or $L->logcroak('Failed to "GetOptions"');

$opt{dir} ||= '.';

# help
$opt{help} && pod2usage(1);

# version
if ($opt{version}) {
    print "$VERSION\n";
    exit 0;
}

# debug level
$opt{quiet} && $L->level($WARN);
$opt{debug} && $L->level($DEBUG);

$L->info("Checking binaries");

check_binary(bin('samtools'), ["--version", "1.1"]);
check_binary(bin('bwa'));


##----------------------------------------------------------------------------##
# tmp dir

my $tmp = tempdir(
                  "imp-XXXXXX",
                  DIR => $opt{tmp},
                  UNLINK => 1,
                  CLEANUP => 1
                 );

##----------------------------------------------------------------------------##
# load fragments
#  early to check ids etc..

my $frg = "$tmp/frg.faq";
unless($opt{frg}){
    $L->info("Loading fragments from STDIN");
    my $c;
    open(FRG, '>', $frg) or die "$! $opt{frg}";
    print FRG $c while read(STDIN, $c, 100000);
    close FRG;
}else{
    $L->info("Loading fragments");
    $opt{frg} = File::Spec->rel2abs($opt{frg});
    qx(ln -s $opt{frg} $frg);
}

$L->logdie("Empty input") unless -s $frg;

my %frg = read_frg($frg);


##----------------------------------------------------------------------------##
# get overlaps
my $sam_cmd;

# index chunk
$L->info("Indexing fragments");
my $bwa_index_cmd = $opt{bwa_path}."bwa index $frg $frg 2>$frg.idx.log";
$L->debug($bwa_index_cmd);
qx($bwa_index_cmd);
$L->logdie("bwa failed: $?\n", do { local $/; local @ARGV = ("$frg.idx.log") ; <> }) if $?;

$sam_cmd = $opt{bwa_path}."bwa mem -e -t $opt{threads} @{$opt{bwa_opt}} $frg $frg 2>$frg.bwa.log";

$L->info("Constructing graph");

$L->debug($sam_cmd);
open(my $sam_oh, "-|", $sam_cmd) or $L->logdie($!);

# init input stream parser
my $sp = Sam::Parser->new(fh => $sam_oh);

my %l;
my $G = Graph->new(
                   undirected => 1,
                  );

# Store seq lengths
while (my %h = $sp->next_header_line('SQ')) {
    $l{$h{SN}} = $h{LN};
}

my $contained;
my $qid_prev = '';

while (my $a = $sp->next_aln) {

    my ($rid,$qid) = ($a->rname, $a->qname);
    # ignore self hit
    next if $rid eq $qid;

    if($qid ne $qid_prev){ # new query
        $qid_prev = $qid;
        $contained = 0;
    }else{
        next if $contained;
    }
    
    my($qprel, $qsufl) = (0,0);
    # query
    my ($o,$t) = $a->cigar =~ /^(\d+)(\w)/;
    $qprel = $o if ($t eq "S" || $t eq "H");
    ($o,$t) = $a->cigar =~ /(\d+)(\w)$/;
    $qsufl = $o if ($t eq "S" || $t eq "H");

    my ($q5,$q3,$r5,$r3);

    # are alignment borders terminal?
    $q5 = $r3 = $qprel < $opt{term_ignore_length} || 0;
    $q3 = $r5 = $qsufl < $opt{term_ignore_length} || 0;

    # my %type = ( "00" => "int", "01" => "5'p", "10" => "3'p", "11" => "con");
    # print OVL join("\t", $qid, $rid, scalar $a->opt('AS'), $a->cigar, $type{$q5.$q3}, $qprel, $qsufl, $a->is(REVERSE_COMPLEMENT) ? "r" : "f"),"\n";

    if($q5 && $q3){
        $contained = 1;
        next;
    }
    
    next unless ($q5 xor $q3);

    if ($a->is(REVERSE_COMPLEMENT)) {
        ($q5,$q3) = ($q3,$q5)
    }

    my $r = $rid.( $r5 ? "'5" : "'3" );
    my $q = $qid.( $q5 ? "'5" : "'3" );

    my $inferior = 0;

    # add edge if better (score) than previous edges
    foreach ($q,$r) {
        if (my ($e) = $G->edges_at($_)) {
            my $score = $G->get_edge_attribute(@$e, "ovl")->{score};
            $L->debug("S: $score ".$a->opt('AS'));
            if ($score < scalar $a->opt('AS')) {
                $L->debug("deleting inferior edge");
                $G->delete_vertices(@$e); # delete inferior ovl
            } else {
                $inferior++;
            }
        }
    }

    if (! $inferior) {
        my @ro;
        if ($r5) {
            # extremely ugly
            # TODO: make bwa return aln length or sufl length of ref as opt
            my $ovll;
            my $cigar = $a->cigar;
            while ($cigar =~ /(\d+)[MD]/g) {
                $ovll += $1;
            }
            ;

            @ro = (-($l{$rid} - ($a->pos-1) - $ovll));
        } else {
            @ro = (0, $a->pos-1);
        }

        my @qo = $r3 ? (-$qsufl) : (0, $qprel);

        $G->set_edge_attribute($q, $r, "ovl",
                               {
                                score => scalar $a->opt('AS'),
                                rc => $a->is(REVERSE_COMPLEMENT),
                                $q."_rc" => $a->is(REVERSE_COMPLEMENT),
                                $q => \@qo,
                                $r => \@ro,
                               });
    }
    #print "$G\n";
}

# isolates (shouldn't happen)
my @isolates = $G->isolated_vertices();
print Dumper({isolates => \@isolates}) if @isolates;
die "isolates" if @isolates;

# add internal frg edges
foreach my $v ($G->vertices) {
    my $u = $v;
    $v = substr($u, 0, -1).(substr($u, -1) == 3 ? 5 : 3);
    $G->add_edges($u,$v);
}

$L->debug(Dumper($G->connected_components));
#print Dumper($G);
#print "$G\n";

$L->info("Cleaning graph");

# nodes degree>2 (shouldn't happen)

# pop cycles
while (my @cycle = $G->find_a_cycle) {
    my ($e1, $e2) = $G->edges_at($cycle[0]);
    # find the non-interfragment edge
    my @e = substr($e1->[0],0,-1) eq substr($e1->[1],0,-1) ? @$e2 : @$e1;
    $L->debug("popping cycle, deleting edge @e");

    $G->delete_edge(@e);
}

my @ccs = $G->connected_components();
$L->info("Synthesizing ".@ccs." backbone paths ");

my $pc = 0;

# start from exterior nodes
while ($G->has_vertices) {
    $pc++;                      # path counter
    my @p = random_path($G);

    last unless @p;             # no more longest paths

    my $id = substr($p[0], 0, -2);
    my $rc_pr = substr($p[0],-1) eq 3 ? 1 : 0;
    my $rc_po = 0;

    die "unknown $id\n", Dumper([keys %frg]) unless exists $frg{$id};
    my $ctg = $frg{$id};
    $ctg->reverse_complement if $rc_pr;
    #$L->debug($ctg->seq);

    my $off;
    for (my $i=2; $i<@p; $i+=2) {
        my $id = substr($p[$i], 0, -2);
        my $rc_r = substr($p[$i],-1) eq 3 ? 1 : 0;

        my $ovl = $G->get_edge_attribute($p[$i-1], $p[$i], "ovl");

        my $rc_o = $ovl->{rc} ? 1 : 0;
        my $rc_q = $ovl->{$p[$i]."_rc"} ? 1 : 0;

        my $frg = $frg{$id}->new;
        my $ohl = $ovl->{$p[$i]};

        $L->debug("$rc_r $rc_o $rc_q [@$ohl]");

        if ($rc_r xor $rc_q) {
            $L->debug("ohl->rc");
            @$ohl = @$ohl == 2 ? ($ohl->[1] * -1) : (0, $ohl->[0] * -1)
        }

        if ($rc_r) {
            $L->debug("frg->rc");
            $frg->reverse_complement;
        }

        $rc_pr = $rc_r;
        $rc_po = $rc_o;

        $off+= abs($_) for @$ohl;
        #$L->debug(" " x abs($off), $frg->seq);
        my $suf = $frg->substr_seq($ohl);

        #$L->debug(" " x length($ctg->seq), $suf->seq);
        $ctg .= $suf;
    }

    $L->debug("[$pc/".@ccs."] ".(@p/2)." fragments, ".length($ctg->seq)." bp");

    print $ctg;

    # my $ctg_rc = $ctg->new;
    # $ctg_rc->reverse_complement;

    # print $ctg->seq,"\n";
    # print "\n";
    # my $ctg_seq = $ctg->seq lt $ctg_rc->seq ? $ctg->seq : $ctg_rc->seq;
    # print $ctg_seq,"\n";

    # if ($opt{ref}) {
    #     # ref
    #     while (my ($k, $v) = each %ref) {
    #         my $vr = $v->new->reverse_complement;
    #         my $ref_seq = $v->seq lt $vr->seq ? $v->seq : $vr->seq;
    #         my @ctg_seq = split(//, $ctg_seq);
    #         my @ref_seq = split(//, $ref_seq);
    #         for (my $i=0; $i<@ctg_seq; $i++) {
    #             print $ctg_seq[$i] eq $ref_seq[$i] ? "|" : " ";
    #         }
    #         print "\n", $ref_seq,"\n";
    #         print "\n", $ref_seq eq $ctg_seq ? "[ Yeah! ]" : "[ D'oh! ]", "\n"
    #     }
    # }

    $G->delete_vertices(@p);
}



##----------------------------------------------------------------------------##
# merge_seqs
sub extend_ctg{
    my ($ctg, $seq, $ovl) = @_;
    # my @o = @$ovl;
    # if($o[qName] eq $seq->id){ # ctg ~= target

    # }elsif($o[tName] eq $seq->id){ # ctg ~= query
    #     my $off = $o[qLength] - $o[qEnd];
    #     $ctg.= $seq->substr_seq($o[tEnd]+$off);
    # }else{
    #     die "overlap ids @o[0..1] don't match sequence id $seq->{id}";
    # }


    return $ctg;
}

sub random_path{
    my $G = shift;
    my $vr = $G->random_vertex;

    my @path = ($vr);
    my @cv = $G->successors($vr);
    my $l = $G->all_reachable($vr) + 1;

    foreach (@cv) {             # one or two directions
        @path = reverse @path;  # second dir in other dir
        my $cv = $_;            # current
        push @path, $cv;

        my $pv = $vr;           # prev
        while (my $nv = next_vertex($G, $cv, $pv)) {
            push @path, $nv;
            $pv = $cv;
            $cv = $nv;

            die "inf loop" if @path > $l;
        }
    }

    #    print Dumper($vr, \@cv, [@path]);
    return @path;
}

sub next_vertex{
    my ($G, $cv, $pv) = @_;
    my @s = $G->successors($cv);
    if (@s < 2) {
        # no successor but previous
        return undef;
    } elsif (@s > 2) {
        die "junction (degree: ".@s.") at $cv\n";
    }

    return $s[0] eq $pv ? $s[1] : $s[0];
}

##----------------------------------------------------------------------------##
# supplementary

sub bin{
    my ($bin) = @_;
    if (exists $opt{$bin."_path"}) {
        return $opt{$bin."_path"}."/".$bin;
    } else {
        return $bin;
    }
}

sub check_binary{
    my($bin, $ver) = (@_);
    my $fbin = $bin;
    unless(-e $fbin && -x $fbin){
        if ($fbin = which($bin)) {
            $L->logdie("Binary '$fbin' not executable") unless -e $fbin && -x $fbin;
        } else {
            $L->logdie("Binary '$bin' neither in PATH nor executable");
        }
    }

    $bin = basename($fbin);

    my $v;
    if ($ver) {
        $L->logdie("ARRAY ref required") unless ref $ver eq "ARRAY";

        my $vs = qx($fbin $ver->[0]);
        if ($? or ! $vs) {
            $L->logdie("Couldn't determine version of $bin, at least $ver->[1] required");
        }

        ($v) = $vs =~ /(\S+?)\D*$/m;

        if (version->parse($v) < version->parse($ver->[1])) {
            $L->logdie("Version $v of '$bin' < $v");
        }

    }

    $L->info(sprintf("  [ok] %-15s %s", $bin.($v ? "-$v" : ""), dirname($fbin)));

}


sub read_frg{
    my $file = shift;
    my $fp = Fasta::Parser->new(file => $file)->check_format;
    $fp = Fastq::Parser->new(file => $file)->check_format unless $fp;
    $L->logdie("Input neither FASTA nor FASTQ\n ($file)") unless $fp;

    my %frg;
    while (my $fa = $fp->next_seq) {
        die "non-unique ID: ".($fa->id)."\n" if exists $frg{$fa->id};
        $frg{$fa->id} = $fa;
    }
    return %frg;
}

