#!/usr/bin/env perl
use warnings;
use strict;
no warnings 'qw';

use Carp;
use Getopt::Long qw(:config no_ignore_case);
use Pod::Usage;
use Log::Log4perl qw(:no_extra_logdie_message);
use Log::Log4perl::Level;

use File::Basename;
use File::Which;
use FindBin '$RealBin';

use Graph;

use Data::Dumper;
$Data::Dumper::Sortkeys = 1;
use Fasta::Parser;
use Sam::Parser;
use Sam::Alignment ':flags';

##---------------------------------------------------------------------------##
# Globals

our $VERSION = "0.1.0";

our $ID = 'easy';

# get a logger
my $L = Log::Log4perl::get_logger();

Log::Log4perl->init( \(q(
	log4perl.rootLogger                     = INFO, Screen
	log4perl.appender.Screen                = Log::Log4perl::Appender::Screen
	log4perl.appender.Screen.stderr         = 1
	log4perl.appender.Screen.layout         = PatternLayout
	log4perl.appender.Screen.layout.ConversionPattern = [%d{yy-MM-dd HH:mm:ss}] [).$ID.q(] %m%n
)));

##----------------------------------------------------------------------------##
# IDEA

# binaries
#  SeqFilter
#  blasr
#  samtools
#  (bwa)

# read seqs
# fastq to fasta
# tmp files in /dev/shm/olc-tiny or fallback to /tmp
# index with samtools

##----------------------------------------------------------------------------##
# Options

my %opt = (
           samtools_path => '',
           bwa_path => $RealBin.'/../util/bwa/',
           threads => 1,
           term_ignore_length => 4,
           bwa_opt => [qw(-a -D0 -r1 -y10 -e -T 0 -W40 -L0,0)],
           dir => '.',
           out => $ID,
           );

GetOptions( # use %opt (Cfg) as defaults
           \%opt, qw(
                      dir=s
                      out=s
                      frg|fragments=s
                      ref|reference=s
                      samtools-path=s
                      version|V!
                      help|h!
                      quiet!
                      debug|D!
                   )
          ) or $L->logcroak('Failed to "GetOptions"');

$opt{dir} ||= '.';

# help
$opt{help} && pod2usage(1);

# version
if($opt{version}){
    print "$VERSION\n"; 
    exit 0;
}

# debug level
$opt{quiet} && $L->level($WARN);
$opt{debug} && $L->level($DEBUG);

for(qw(frg)){
    if(ref $opt{$_} eq 'ARRAY'){
	pod2usage("required: --$_") unless @{$opt{$_}}
    }else{
	pod2usage("required: --$_") unless defined ($opt{$_})
    }
};

check_binary(bin('samtools'), ["--version", "1.1"]);
check_binary(bin('blasr'));

##----------------------------------------------------------------------------##
# get overlaps

my $bout = "$opt{dir}/$opt{out}.sam";
my $blog = "$opt{dir}/$opt{out}.log";
my $frg = $opt{frg};

my $sam_cmd;
    
# index chunk
$L->debug("Indexing fragments");
my $bwa_index_cmd = $opt{bwa_path}."bwa index $frg $frg 2>$frg.idx.log";
$L->debug($bwa_index_cmd);
qx($bwa_index_cmd);
$L->logdie("bwa failed: $?\n", do { local $/; local @ARGV = ("$frg.idx.log") ; <> }) if $?;
    
$sam_cmd = $opt{bwa_path}."bwa mem -e -t $opt{threads} @{$opt{bwa_opt}} $frg $frg 2>$frg.bwa.log";
    
$L->debug("Mapping fragments");
$L->debug($sam_cmd);
open(my $sam_oh, "-|", $sam_cmd) or $L->logdie($!);                
    
# init input stream parser
my $sp = Sam::Parser->new(fh => $sam_oh);

my %l;
my $G = Graph->new(
 	undirected => 1,
);

# Store seq lengths
while (my %h = $sp->next_header_line('SQ')) {
    $l{$h{SN}} = $h{LN};
}

while (my $a = $sp->next_aln) {
    my ($rid,$qid) = ($a->rname, $a->qname);
    # ignore self hit 
    next if $rid eq $qid;

    my($qprel, $qsufl) = (0,0);
    # query
    my ($o,$t) = $a->cigar =~ /^(\d+)(\w)/;
    $qprel = $o if ($t eq "S" || $t eq "H");
    ($o,$t) = $a->cigar =~ /(\d+)(\w)$/;
    $qsufl = $o if ($t eq "S" || $t eq "H");

    my ($q5,$q3,$r5,$r3);

    # are alignment borders terminal?
    $q5 = $r3 = $qprel < $opt{term_ignore_length};
    $q3 = $r5 = $qsufl < $opt{term_ignore_length};

    # ignore contained and non-termianal
    next if ! ($q5 xor $q3);
    
    if($a->is(REVERSE_COMPLEMENT)){
        #print "rc\n";
        ($q5,$q3) = ($q3,$q5)
    }
    
    my $r = $rid.( $r5 ? "'5" : "'3" );
    my $q = $qid.( $q5 ? "'5" : "'3" );

    #print "$r $q \n",substr($a, 0,30),"\t";
    
    my $inferior = 0;

    # add edge if better (score) than previous edges
    foreach($q,$r){
        if(my ($e) = $G->edges_at($_)){
            my $score = $G->get_edge_attribute(@$e, "ovl")->{score};
            if($score < scalar $a->opt('AS')){
                $G->delete_vertices(@$e); # delete inferior ovl
            }else{
                $inferior++;
            }
        }
    }

    if(! $inferior){

        my @ro;
        if($r5){
            # extremely ugly
            # TODO: make bwa return aln length or sufl length of ref as opt 
            my $ovll;
            my $cigar = $a->cigar;
            while($cigar =~ /(\d+)[MD]/g){
                $ovll += $1;
            };
            
            @ro = (-($l{$rid} - ($a->pos-1) - $ovll));
        }else{
            @ro = (0, $a->pos-1);
        }

        my @qo = $r3 ? (-$qsufl) : (0, $qprel);
        
        $G->set_edge_attribute($q, $r, "ovl",
                               {
                                score => scalar $a->opt('AS'),
                                rc => $a->is(REVERSE_COMPLEMENT),
                                $q."_rc" => $a->is(REVERSE_COMPLEMENT),
                                $q => \@qo,
                                $r => \@ro,
                               });
    }
    #print "$G\n";    
}

# add internal frg edges
foreach my $v ($G->vertices){
    my $u = $v;
    $v = substr($u, 0, -1).(substr($u, -1) == 3 ? 5 : 3);
    $G->add_edges($u,$v);
}

#print Dumper($G);
#print "$G\n";

# isolates (shouldn't happen)
my @isolates = $G->isolated_vertices();
print Dumper({isolates => \@isolates}) if @isolates;
    
# nodes degree>2 (shouldn't happen)

# circles
my @cycle = $G->find_a_cycle;
print Dumper({cycles => \@cycle}) if @cycle;

my @ccs = $G->connected_components();

my %frg = read_frg($opt{frg});
my %ref = read_frg($opt{ref}) if $opt{ref};

# start from exterior nodes
while($G->has_vertices){
    my @p = $G->longest_path;
    print STDERR "@p\n";
 
    last unless @p; # no more longest paths
    
    my $id = substr($p[0], 0, -2);
    my $rc_pr = substr($p[0],-1) eq 3 ? 1 : 0;
    my $rc_po = 0;
    
    my $ctg = $frg{$id};
    $ctg->reverse_complement if $rc_pr;
    print STDERR $ctg->seq,"\n";

    my $off;
    for (my $i=2; $i<@p; $i+=2){
        my $id = substr($p[$i], 0, -2);
        my $rc_r = substr($p[$i],-1) eq 3 ? 1 : 0;

        my $ovl = $G->get_edge_attribute($p[$i-1], $p[$i], "ovl");        

        my $rc_o = $ovl->{rc} ? 1 : 0;
        my $rc_q = $ovl->{$p[$i]."_rc"} ? 1 : 0;

        my $frg = $frg{$id}->new;
        my $ohl = $ovl->{$p[$i]};

        print STDERR "$rc_r $rc_o $rc_q [@$ohl]\n";         

        if($rc_r xor $rc_q){
            print STDERR "-- ohl->rc --\n";
            @$ohl = @$ohl == 2 ? ($ohl->[1] * -1) : (0, $ohl->[0] * -1)
        }

        if($rc_r){
            print STDERR "-- frg->rc --\n";
            $frg->reverse_complement;
        }

        $rc_pr = $rc_r;
        $rc_po = $rc_o;
        
        $off+= abs($_) for @$ohl;
        print " " x abs($off), $frg->seq, "\n";
        my $suf = $frg->substr_seq($ohl);

        print STDERR " " x length($ctg->seq), $suf->seq,"\n";
        $ctg .= $suf;
    }

    my $ctg_rc = $ctg->new;
    $ctg_rc->reverse_complement;

    print $ctg->seq,"\n";
    print "\n";
    my $ctg_seq = $ctg->seq lt $ctg_rc->seq ? $ctg->seq : $ctg_rc->seq;
    print $ctg_seq,"\n";
    
    # ref
    while (my ($k, $v) = each %ref){ 
        my $vr = $v->new->reverse_complement;
        my $ref_seq = $v->seq lt $vr->seq ? $v->seq : $vr->seq;
        my @ctg_seq = split(//, $ctg_seq);
        my @ref_seq = split(//, $ref_seq);
        for(my $i=0; $i<@ctg_seq; $i++){
            print $ctg_seq[$i] eq $ref_seq[$i] ? "|" : " ";
        }
        print "\n", $ref_seq,"\n";
        print "\n", $ref_seq eq $ctg_seq ? "[ Yeah! ]" : "[ D'oh! ]", "\n"
    }

    my $offset = 0;
    # for(sort keys %frg){
    #     print " " x $offset, $frg{$_}->seq,"\n";
    #     $offset+=42;
    # }
    $G->delete_vertices(@p);

}



##----------------------------------------------------------------------------##
# merge_seqs
sub extend_ctg{
    my ($ctg, $seq, $ovl) = @_;
    # my @o = @$ovl;
    # if($o[qName] eq $seq->id){ # ctg ~= target
        
    # }elsif($o[tName] eq $seq->id){ # ctg ~= query
    #     my $off = $o[qLength] - $o[qEnd];
    #     $ctg.= $seq->substr_seq($o[tEnd]+$off);
    # }else{
    #     die "overlap ids @o[0..1] don't match sequence id $seq->{id}";
    # }


    return $ctg;
}


##----------------------------------------------------------------------------##
# supplementary

sub bin{
    my ($bin) = @_;
    if(exists $opt{$bin."_path"}){
        return $opt{$bin."_path"}."/".$bin;
    }else{
        return $bin;
    }
}

sub check_binary{
    my($bin, $ver) = (@_);
    my $fbin = $bin;
    unless(-e $fbin && -x $fbin){
      if($fbin = which($bin)){
        $L->logdie("Binary '$fbin' not executable") unless -e $fbin && -x $fbin;
      }else{
        $L->logdie("Binary '$bin' neither in PATH nor executable");
      }
    }

    $bin = basename($fbin);

    my $v;
    if($ver){
        $L->logdie("ARRAY ref required") unless ref $ver eq "ARRAY";
        
        my $vs = qx($fbin $ver->[0]);
        if($? or ! $vs){
            $L->logdie("Couldn't determine version of $bin, at least $ver->[1] required");
        }
        
        ($v) = $vs =~ /(\S+?)\D*$/m;
        
        if(version->parse($v) < version->parse($ver->[1])){
            $L->logdie("Version $v of '$bin' < $v");
        }
        
    }
    
    $L->info(sprintf("  [ok] %-15s %s", $bin.($v ? "-$v" : ""), dirname($fbin)));
    
}


sub read_frg{
    my $file = shift;
    my $fp = Fasta::Parser->new(file => $file);
    my %frg;
    while(my $fa = $fp->next_seq){
        die "non-unique ID: ".($fa->id)."\n" if exists $frg{$fa->id};
        $frg{$fa->id} = $fa;
    }
    return %frg;
}
